{{/*************************************************************************
 * This file was generated from tpl/api.markdown. DO NOT EDIT.
*************************************************************************/}}

{{template "_top.gohtml" .}}

<h1 id="goatcounter-api">GoatCounter API</h1>
<p>GoatCounter has a rudimentary API; this is far from feature-complete, but solves
some common use cases.</p>

<p>The API is currently unversioned and prefixed with <code>/api/v0</code>; while breaking
changes will be avoided and are not expected, they <em>may</em> occur. I'll be sure to
send ample notification of this to everyone who has generated an API key.</p>

<h2 id="authentication">Authentication <a href="#authentication"></a></h2>
<p>To use the API create a key in your account (<code>Settings → Password, MFA, API</code>);
send the API key in the <code>Authorization</code> header as <code>Authorization: bearer
[token]</code>.</p>

<p>You will need to use <code>Content-Type: application/json</code>; all requests return JSON
unless noted otherwise.</p>

<p>Example:</p>

<pre><code>curl -X POST \
    -H 'Content-Type: application/json' \
    -H 'Authorization: Bearer 2q2snk7clgqs63tr4xc5bwseajlw88qzilr8fq157jz3qxwwmz5' \
    https://example.goatcounter.com/api/v0/export
</code></pre>

<h2 id="rate-limit">Rate limit <a href="#rate-limit"></a></h2>
<p>The rate limit is 60 requests per 120 seconds. The current rate limits are
indicated in the <code>X-Rate-Limit-Limit</code>, <code>X-Rate-Limit-Remaining</code>, and
<code>X-Rate-Limit-Reset</code> headers.</p>

<h2 id="api-reference">API reference <a href="#api-reference"></a></h2>
<p>API reference docs are available at:</p>

<ul>
  <li><a href="/api.json">/api.json</a> – OpenAPI 2.0 JSON file.</li>
  <li><a href="/api.html">/api.html</a> – Basic HTML.</li>
  <li><a href="https://app.swaggerhub.com/apis-docs/Carpetsmoker/GoatCounter/0.1">SwaggerHub</a></li>
</ul>

<p>The files are also available in the <code>docs</code> directory of the source repository.</p>

<h2 id="examples">Examples <a href="#examples"></a></h2>

<h3 id="export">Export <a href="#export"></a></h3>

<p>Example to export via the API:</p>

<pre><code>token=[your api token]
api=http://[my code].goatcounter.com/api/v0
curl() {
    \command curl --silent \
        -H 'Content-Type: application/json' \
        -H "Authorization: Bearer $token" \
        $@
}

# Start a new export, get ID from response object.
id=$(curl -X POST "$api/export" | jq .id)

# The export is started in the background, so we'll need to wait until it's finished.
while :; do
    sleep 1

    finished=$(curl "$api/export/$id" | jq .finished_at)
    if [ "$finished" != "null" ]; then
        # Download the export.
        curl "$api/export/$id/download" | gzip -d

        break
    fi
done
</code></pre>

<p>The above doesn't does no error checking for brevity: errors are reported in the
<code>error</code> field as a string, or in the <code>errors</code> field as <code>{"name": ["err1",
"err2", "name2": [..]}</code>.</p>

<p>The export object contains a <code>last_hit_id</code> parameter, which can be used as a
pagination cursor to only download hits after this export. This is useful to
sync your local database every hour or so:</p>

<pre><code># Get cursor
start=$(curl "$api/export/$id" | jq .last_hit_id)

# Start new export starting from the cursor.
id=$(curl -X POST --data "{\"start_from_hit_id\":$start}" "$api/export" | jq .id)
</code></pre>

{{template "_bottom.gohtml" .}}
